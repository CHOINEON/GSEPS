name: Deploy to AWS EC2

on:
  push:
    tags:
      - "v*"

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 빌드 환경변수 파일 생성 .env
        run: |
          # Frontend 환경변수
          echo "VITE_API_URL=${{ secrets.BACKEND_SERVER_URL }}" > .env

          # Backend 환경변수
          echo "NODE_ENV=production" >> .env
          echo "DB_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ secrets.POSTGRES_DB }}" >> .env
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env
          echo "PYTHON_SERVER_URL=http://ai:8888" >> .env

      - name: Docker 이미지 빌드 및 푸시
        run: |
          # AI 서비스 빌드
          docker build -t $DOCKERHUB_USERNAME/app-ai:$IMAGE_TAG -f AI/Dockerfile.prod ./AI

          # Backend 서비스 빌드
          docker build -t $DOCKERHUB_USERNAME/app-backend:$IMAGE_TAG -f backend/Dockerfile.prod ./backend

          # Frontend 서비스 빌드
          docker build -t $DOCKERHUB_USERNAME/app-frontend:$IMAGE_TAG -f frontend/Dockerfile.prod ./frontend

          # 이미지 푸시
          docker push $DOCKERHUB_USERNAME/app-ai:$IMAGE_TAG
          docker push $DOCKERHUB_USERNAME/app-backend:$IMAGE_TAG
          docker push $DOCKERHUB_USERNAME/app-frontend:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: EC2에 docker-compose.prod.yml 파일 복사
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.prod.yml"
          target: "/home/${{ secrets.EC2_USERNAME }}"

      - name: EC2에 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}
            # # 환경변수 파일 생성 시 sudo 사용
            # sudo bash -c 'echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env'
            # sudo bash -c 'echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env'
            # sudo bash -c 'echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env'
            # sudo bash -c 'echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env'
            # sudo bash -c 'echo "BACKEND_SERVER_URL=${{ secrets.BACKEND_SERVER_URL }}" >> .env'
            # sudo bash -c 'echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env'
            # sudo bash -c 'echo "IMAGE_TAG=${{ github.sha }}" >> .env'

            # # .env 파일 권한 변경
            # sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} .env
            # sudo chmod 644 .env

            # docker-compose 실행
            # sudo docker-compose -f docker-compose.prod.yml down
            # sudo docker system prune -af
            # sudo docker-compose -f docker-compose.prod.yml pull
            # sudo docker-compose -f docker-compose.prod.yml up -d

            sudo -E AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              AWS_REGION=${{ secrets.AWS_REGION }} \
              POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
              POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} \
              BACKEND_SERVER_URL=${{ secrets.BACKEND_SERVER_URL }} \
              DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
              IMAGE_TAG=${{ github.sha }} \
              docker-compose -f docker-compose.prod.yml down

            sudo docker system prune -af

            sudo -E AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              AWS_REGION=${{ secrets.AWS_REGION }} \
              POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
              POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} \
              BACKEND_SERVER_URL=${{ secrets.BACKEND_SERVER_URL }} \
              DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
              IMAGE_TAG=${{ github.sha }} \
              docker-compose -f docker-compose.prod.yml up -d

            # sudo rm .env
