# version: "3.8"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Seoul
      PGTZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      - ./eps-test-data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  ai:
    build:
      context: ./AI
      dockerfile: Dockerfile.dev
    volumes:
      - ./AI:/app
    ports:
      - "8888:8888"
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Seoul
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "20000:20000"
    environment:
      - TZ=Asia/Seoul
      - NODE_ENV=development
      - PYTHON_SERVER_URL=http://ai:8888
      - DB_HOST=postgres # DB 컨테이너 이름
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_DATABASE=${POSTGRES_DB}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    networks:
      - app_network
    depends_on:
      - postgres
      - ai

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=${BACKEND_SERVER_URL} # 웹상에서 요청하니까 백엔드 IP or DNS 주소 넣어줌
      - TZ=Asia/Seoul
    networks:
      - app_network
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge
