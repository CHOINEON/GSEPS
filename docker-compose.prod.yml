# version: "3.8"

services:
  # postgres:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     TZ: Asia/Seoul
  #     PGTZ: Asia/Seoul
  #   volumes:
  #     - ./postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - app_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: always

  ai:
    image: ${DOCKERHUB_USERNAME}/app-ai:${IMAGE_TAG}
    build:
      context: ./AI
      dockerfile: Dockerfile.prod
    ports:
      - "8888:8888"
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Seoul
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    networks:
      - app_network
    restart: always

  backend:
    image: ${DOCKERHUB_USERNAME}/app-backend:${IMAGE_TAG}
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "20000:20000"
    environment:
      - TZ=Asia/Seoul
      - NODE_ENV=production
      - PYTHON_SERVER_URL=http://ai:8888
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_DATABASE=${POSTGRES_DB}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    networks:
      - app_network
    depends_on:
      # - postgres
      - ai
    restart: always

  frontend:
    image: ${DOCKERHUB_USERNAME}/app-frontend:${IMAGE_TAG}
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=${BACKEND_SERVER_URL} # 웹상에서 요청하니까 백엔드 IP or DNS 주소 넣어줌(컨테이너 이름 X)
      - TZ=Asia/Seoul
    networks:
      - app_network
    depends_on:
      - backend
    restart: always

networks:
  app_network:
    driver: bridge
# volumes:
#   postgres_data:
